pipeline {
  agent any

  environment {
    NODE_ENV = 'pipeline'
    MAVEN_OPTS = '-Dmaven.repo.local=.m2/repository'
    APP_PORT = '8081'
    // Used by Jenkins for health checks
    LOCAL_TARGET_URL = "http://localhost:${APP_PORT}"
     // Used by ZAP container
    ZAP_TARGET_URL   = "http://jenkins:${APP_PORT}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'mkdir -p logs'
      }
    }

    stage('Build') {
      steps {
        echo "Building project"
        sh 'mvn clean compile | tee logs/mvn-build.log'
      }
    }

    // stage('Test') {
    //   steps {
    //     echo "Running tests"
    //     sh 'mvn test | tee logs/mvn-test.log'
    //   }
    // }

    // stage('Run App') {
    //   steps {
    //     echo "Starting Spring Boot app on port ${APP_PORT}"
    //     sh '''
    //       nohup mvn spring-boot:run -Dspring-boot.run.arguments=--server.port=${APP_PORT} > logs/app.log 2>&1 &
    //       echo $! > app.pid

    //       echo "Waiting for app to be available at ${LOCAL_TARGET_URL}..."
    //       for i in $(seq 1 20); do
    //         if curl -s --head --fail ${LOCAL_TARGET_URL}; then
    //           echo "App is up!"
    //           exit 0
    //         fi
    //         echo "App not up yet, retrying in 5s... ($i/20)"
    //         sleep 5
    //       done

    //       echo "App did not start in time after 20 attempts."
    //       echo "Dumping logs from logs/app.log:"
    //       echo "----------------------------------"
    //       cat logs/app.log || echo "No logs found!"
    //       echo "----------------------------------"

    //       echo "ðŸ”ª Killing Spring Boot app process if it's still running..."
    //       kill $APP_PID || true

    //       exit 1
    //     '''
    //   }
    // }

    // stage('Run OWASP ZAP Scan') {
    //   steps {
    //     echo "Running ZAP scan from Jenkins against ${ZAP_TARGET_URL}"
    //     sh '''
    //       docker exec zap zap-cli -p ${ZAP_PORT} status -t 60
    //       docker exec zap zap-cli -p ${ZAP_PORT} open-url ${ZAP_TARGET_URL}
    //       docker exec zap zap-cli -p ${ZAP_PORT} spider ${ZAP_TARGET_URL}
    //       docker exec zap zap-cli -p ${ZAP_PORT} active-scan ${ZAP_TARGET_URL}
    //       docker exec zap zap-cli -p ${ZAP_PORT} report -o /zap/wrk/zap-report.html -f html
    //       docker cp zap:/zap/wrk/zap-report.html zap-reports/
    //     '''
    //   }
    // }

    stage('Deploy') {
      // when {
      //   branch 'master'
      // }
      steps {
        echo "Deploying to production"
        echo "Using host: ${env.PROD_IP}"
        sh '''
          ansible-playbook -i ${env.PROD_IP}, devopspipeline/ansible/playbook.yml
        '''
      }
    }
  }

  post {
    always {
      echo "Cleaning up"

      archiveArtifacts artifacts: 'logs/*.log', allowEmptyArchive: true

      // Stop the Spring Boot app
      sh '''
        if [ -f app.pid ]; then
          kill $(cat app.pid) || true
          rm app.pid
        fi
      '''

    //TODO: Archive artifacts, add AWS-CLI to the jenkins container
    //   archiveArtifacts artifacts: 'target/surefire-reports/**', allowEmptyArchive: true

    //   sh '''
    //     TIMESTAMP=$(date +%Y%m%d-%H%M%S)
    //     JOB_NAME=$(echo "$JOB_NAME" | tr '/' '_')

    //     AWS_BUCKET_NAME=17636-devsecops-g2loggingbucket
    //     AWS_PATH="jenkins-logs/$JOB_NAME/$BUILD_NUMBER-$TIMESTAMP"

    //     if [ -d logs ]; then
    //       aws s3 cp logs/ s3://$AWS_BUCKET_NAME/$AWS_PATH/logs/ --recursive
    //     fi

    //     if [ -d target/surefire-reports ]; then
    //       aws s3 cp target/surefire-reports/ s3://$AWS_BUCKET_NAME/$AWS_PATH/surefire-reports/ --recursive
    //     fi
    //   '''
    }

    failure {
      echo "Build or test failure."
    }
  }
}
