pipeline {
  agent any

  environment {
    NODE_ENV = 'pipeline'
    MAVEN_OPTS = '-Dmaven.repo.local=.m2/repository'
    APP_PORT = '8081'
    ZAP_TARGET_URL = "http://localhost:${APP_PORT}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'mkdir -p logs'
      }
    }

    stage('Build') {
      steps {
        echo "Building project"
        sh 'mvn clean compile | tee logs/mvn-build.log'
      }
    }

    stage('Test') {
      steps {
        echo "Running tests"
        sh 'mvn test | tee logs/mvn-test.log'
      }
    }

    stage('Start Spring Boot App') {
      steps {
        echo "Starting Spring Boot app"
        sh '''
          nohup mvn spring-boot:run > logs/app.log 2>&1 &
          echo $! > app.pid
        '''

        sh '''
          echo "Waiting for app to be available at ${ZAP_TARGET_URL}..."
          for i in {1..10}; do
            if curl -s --head --fail ${ZAP_TARGET_URL}; then
              echo "App is up!"
              break
            fi
            echo "App not up yet, retrying in 5s..."
            sleep 5
          done
        '''
      }
    }

    stage('Security Scan - OWASP ZAP') {
      steps {
        echo "Running OWASP ZAP security scan"
        sh '''
          mkdir -p zap-reports
          
          docker exec zap zap-cli -p 8090 open-url ${ZAP_TARGET_URL}
          docker exec zap zap-cli -p 8090 spider ${ZAP_TARGET_URL}
          docker exec zap zap-cli -p 8090 active-scan ${ZAP_TARGET_URL}
          docker exec zap zap-cli -p 8090 report -o /zap/wrk/zap-report.html -f html
          docker cp zap:/zap/wrk/zap-report.html zap-reports/
        '''
      }
    }

    stage('Deploy') {
      when {
        branch 'master'
      }
      steps {
        echo "Deploying to production"
      }
    }
  }

  post {
    always {
      echo "Cleaning up"

      archiveArtifacts artifacts: 'logs/*.log', allowEmptyArchive: true

      // Stop the Spring Boot app
      sh '''
        if [ -f app.pid ]; then
          kill $(cat app.pid) || true
          rm app.pid
        fi
      '''

    //TODO: Archive artifacts, add AWS-CLI to the jenkins container
    //   archiveArtifacts artifacts: 'target/surefire-reports/**', allowEmptyArchive: true

    //   sh '''
    //     TIMESTAMP=$(date +%Y%m%d-%H%M%S)
    //     JOB_NAME=$(echo "$JOB_NAME" | tr '/' '_')

    //     AWS_BUCKET_NAME=17636-devsecops-g2loggingbucket
    //     AWS_PATH="jenkins-logs/$JOB_NAME/$BUILD_NUMBER-$TIMESTAMP"

    //     if [ -d logs ]; then
    //       aws s3 cp logs/ s3://$AWS_BUCKET_NAME/$AWS_PATH/logs/ --recursive
    //     fi

    //     if [ -d target/surefire-reports ]; then
    //       aws s3 cp target/surefire-reports/ s3://$AWS_BUCKET_NAME/$AWS_PATH/surefire-reports/ --recursive
    //     fi
    //   '''
    }

    failure {
      echo "Build or test failure."
    }
  }
}
