pipeline {
  agent any

  environment {
    NODE_ENV = 'pipeline'
    MAVEN_OPTS = '-Dmaven.repo.local=.m2/repository'
    APP_PORT = '8081'
    // Used by Jenkins for health checks
    LOCAL_TARGET_URL = "http://localhost:${APP_PORT}"
     // Used by ZAP container
    ZAP_TARGET_URL   = "http://jenkins:${APP_PORT}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'mkdir -p logs'
      }
    }

    stage('Build') {
      steps {
        echo "Building project"
        sh 'mvn clean compile | tee logs/mvn-build.log'
      }
    }

    stage('Test') {
      steps {
        echo "Running tests"
        sh 'mvn test | tee logs/mvn-test.log'
      }
    }

    stage('Run Sonarqube') {
      environment {
        SONAR_HOST_URL = 'http://sonarqube:9000'
        SONAR_AUTH_TOKEN = credentials('sonarqube')
      }
      steps {
        sh 'mvn sonar:sonar -Dsonar.projectKey=devops-final-project -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_AUTH_TOKEN'
      }
    }

    stage('ZAP') {
      steps {
        echo "Running ZAP scan"
        sh '''
          cd devopspipeline/owaspzap
          ./run_zap.sh
        '''
      }
    }

    stage('Archive ZAP') {
      steps {
        archiveArtifacts artifacts: 'devopspipeline/owaspzap/logs/*', allowEmptyArchive: true
      }
    }

    stage('Deploy') {
      when {
        branch 'master'
      }
      steps {
        echo "Deploying to production"
        sh '''
          echo "[production]" > /var/jenkins_home/inventory
          echo "${PROD_IP}" >> /var/jenkins_home/inventory
          chmod 644 /var/jenkins_home/deploy_key || true
          echo "${GH_DEPLOY_KEY}" | base64 --decode > /var/jenkins_home/deploy_key
          chmod 400 /var/jenkins_home/deploy_key
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook -vv -i /var/jenkins_home/inventory -u ec2-user --private-key /var/jenkins_home/deploy_key devopspipeline/ansible/playbook.yml
        '''
        echo "Deployment complete: ${PROD_IP}:8080"
      }
    }
  }

  post {
    always {
      echo "Cleaning up"

      archiveArtifacts artifacts: 'logs/*.log', allowEmptyArchive: true

      // Stop the Spring Boot app
      sh '''
        if [ -f app.pid ]; then
          kill $(cat app.pid) || true
          rm app.pid
        fi
      '''

    //TODO: Archive artifacts, add AWS-CLI to the jenkins container
    //   archiveArtifacts artifacts: 'target/surefire-reports/**', allowEmptyArchive: true

    //   sh '''
    //     TIMESTAMP=$(date +%Y%m%d-%H%M%S)
    //     JOB_NAME=$(echo "$JOB_NAME" | tr '/' '_')

    //     AWS_BUCKET_NAME=17636-devsecops-g2loggingbucket
    //     AWS_PATH="jenkins-logs/$JOB_NAME/$BUILD_NUMBER-$TIMESTAMP"

    //     if [ -d logs ]; then
    //       aws s3 cp logs/ s3://$AWS_BUCKET_NAME/$AWS_PATH/logs/ --recursive
    //     fi

    //     if [ -d target/surefire-reports ]; then
    //       aws s3 cp target/surefire-reports/ s3://$AWS_BUCKET_NAME/$AWS_PATH/surefire-reports/ --recursive
    //     fi
    //   '''
    }

    failure {
      echo "Build or test failure."
    }
  }
}
